{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#test","title":"Test","text":""},{"location":"MkDocs%20Instruction/GitHub_Hosting_Setup/","title":"Set up Doc Site on GitHub","text":""},{"location":"MkDocs%20Instruction/GitHub_Hosting_Setup/#load-doc-site-to-repo","title":"Load Doc Site To Repo","text":"<ol> <li> <p>Create a GitHub repository:     If you don't have one already, create a new GitHub repository. This will be the place where you'll store all the files for your MkDocs site.</p> </li> <li> <p>Initialize your MkDocs project:     If you have not done so already, you'll need to initialize a new MkDocs project in your local directory. You can do this with the command <code>mkdocs new [project name]</code>. This will create a new directory with the necessary files to start a new MkDocs project.</p> </li> <li> <p>Push your MkDocs project to GitHub:     Once your MkDocs project is set up, you can push it to your GitHub repository. You can do this by navigating to your project directory and using the following commands:</p> <pre><code>git init\ngit add .\ngit commit -m \"First commit\"\ngit branch -M main\ngit remote add origin https://github.com/yourusername/[repo name].git\ngit push -u origin main\n</code></pre> </li> </ol> <p>This command will build your site, create (or update) the gh-pages branch in your local repository, copy the built site to this branch, and then push the branch to GitHub.</p>"},{"location":"MkDocs%20Instruction/GitHub_Hosting_Setup/#create-doc-site-page","title":"Create Doc Site Page","text":"<ol> <li> <p>Build your site and push it to the gh-pages branch:     By default, GitHub Pages uses a branch named gh-pages in your repository to serve the website. You'll need to build your MkDocs site and push the built site to this branch. MkDocs comes with a built-in deployment command for this. In your project directory, use the following command:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>This command will build your site, create (or update) the gh-pages branch in your local repository, copy the built site to this branch, and then push the branch to GitHub.</p> </li> <li> <p>View your site:     After you've pushed your site to the gh-pages branch, it should be available at <code>https://[username].github.io/[repo name]/</code>. Replace \"yourusername\" and \"yourrepository\" with your GitHub username and the name of your repository respectively.</p> </li> </ol>"},{"location":"MkDocs%20Instruction/Insert_Doc_Page/","title":"Insert A New Document Page","text":"<ol> <li> <p>Create a New Markdown File</p> </li> <li> <p>Create a new markdown file (<code>.md</code> extension) in the directory where your documentation resides. This is usually in the <code>docs/</code> directory at the root of your project. The name of the file will be used as the URL of the page (i.e., <code>my_new_page.md</code> will be accessible at <code>sitename.com/my_new_page</code>). </p> </li> <li> <p>Add Doc Content </p> </li> <li> <p>Update mkdocs.yml </p> </li> <li> <p>After document md is updated, open <code>mkdocs.yml</code>, which is typically located at the root of your project.</p> </li> <li> <p>Under the <code>nav:</code> section update the site map. To add your new page, simply add a new line with the format <code>- Page Title: 'filename.md'</code>. Here, <code>Page Title</code> is what will appear in the navigation menu on your site, and <code>'filename.md'</code> is the path to your markdown file relative to <code>mkdocs.yml</code>.</p> </li> <li> <p>Here's an example of what this might look like:</p> <pre><code>nav:\n    - Home: 'index.md'\n- User Guide: 'user-guide.md'\n- My New Page: 'my_new_page.md'  # your new page\n</code></pre> </li> <li> <p>View the Doc Site (locally)</p> </li> <li>After you've saved your changes to <code>mkdocs.yml</code>, build the site by running the command <code>mkdocs build</code> in your terminal. This will generate a new version of your site with all your changes.</li> <li>To view your new page, start the MkDocs server with the command <code>mkdocs serve</code> and navigate to <code>localhost:8000</code> in your web browser. From there, you should be able to navigate to your new page via the navigation menu.</li> </ol>"},{"location":"recipes/recipes/","title":"Prefect Recipes","text":"<p>Prefect recipes are common, extensible examples for setting up Prefect in your execution environment with ready-made ingredients such as Dockerfiles, Terraform files, and GitHub Actions.</p> <p>Recipes are useful when you are looking for tutorials on how to deploy an agent, use event-driven flows, set up unit testing, and more.</p> <p>The following are Prefect recipes specific to Prefect 2. You can find a full repository of recipes at https://github.com/PrefectHQ/prefect-recipes and additional recipes at Prefect Discourse.</p>","tags":["recipes","best practices","examples"]},{"location":"recipes/recipes/#recipe-catalog","title":"Recipe catalog","text":"","tags":["recipes","best practices","examples"]},{"location":"recipes/recipes/#contributing-recipes","title":"Contributing recipes","text":"<p>We're always looking for new recipe contributions! See the Prefect Recipes repository for details on how you can add your Prefect recipe, share best practices with fellow Prefect users, and earn some swag. </p> <p>Prefect recipes provide a vital cookbook where users can find helpful code examples and, when appropriate, common steps for specific Prefect use cases.</p> <p>We love recipes from anyone who has example code that another Prefect user can benefit from (e.g. a Prefect flow that loads data into Snowflake).</p> <p>Have a blog post, Discourse article, or tutorial you\u2019d like to share as a recipe? All submissions are welcome. Clone the prefect-recipes repo, create a branch, add a link to your recipe to the README, and submit a PR. Have more questions? Read on.</p>","tags":["recipes","best practices","examples"]},{"location":"recipes/recipes/#what-is-a-recipe","title":"What is a recipe?","text":"<p>A Prefect recipe is like a cookbook recipe: it tells you what you need \u2014 the ingredients \u2014 and some basic steps, but assumes you can put the pieces together. Think of the Hello Fresh meal experience, but for dataflows.</p> <p>A tutorial, on the other hand, is Julia Child holding your hand through the entire cooking process: explaining each ingredient and procedure, demonstrating best practices, pointing out potential problems, and generally making sure you can\u2019t stray from the happy path to a delicious meal.</p> <p>We love Julia, and we love tutorials. But we don\u2019t expect that a Prefect recipe should handhold users through every step and possible contingency of a solution. A recipe can start from an expectation of more expertise and problem-solving ability on the part of the reader.</p> <p>To see an example of a high quality recipe, check out Serverless with AWS Chalice. This recipe includes all of the elements we like to see.</p>","tags":["recipes","best practices","examples"]},{"location":"recipes/recipes/#steps-to-add-your-recipe","title":"Steps to add your recipe","text":"<p>Here\u2019s our guide to creating a recipe:</p> <pre><code># Clone the repository\ngit clone git@github.com:PrefectHQ/prefect-recipes.git\ncd prefect-recipes\n\n# Create and checkout a new branch\ngit checkout -b new_recipe_branch_name\n</code></pre> <ol> <li>Add your recipe. Your code may simply be a copy/paste of a single Python file or an entire folder. Unsure of where to add your file or folder? Just add under the <code>flows-advanced/</code> folder. A Prefect Recipes maintainer will help you find the best place for your recipe. Just want to direct others to a project you made, whether it be a repo or a blogpost? Simply link to it in the Prefect Recipes README!</li> <li>(Optional) Write a README.</li> <li>Include a dependencies file, if applicable.</li> <li>Push your code and make a PR to the repository.</li> </ol> <p>That\u2019s it! </p>","tags":["recipes","best practices","examples"]},{"location":"recipes/recipes/#what-makes-a-good-recipe","title":"What makes a good recipe?","text":"<p>Every recipe is useful, as other Prefect users can adapt the recipe to their needs. Particularly good ones help a Prefect user bake a great dataflow solution! Take a look at the prefect-recipes repo to see some examples.</p>","tags":["recipes","best practices","examples"]},{"location":"recipes/recipes/#what-are-the-common-ingredients-of-a-good-recipe","title":"What are the common ingredients of a good recipe?","text":"<ul> <li>Easy to understand: Can a user easily follow your recipe? Would a README or code comments help? A simple explanation providing context on how to use the example code is useful, but not required. A good README can set a recipe apart, so we have some additional suggestions for README files below.</li> <li>Code and more: Sometimes a use case is best represented in Python code or shell scripts. Sometimes a configuration file is the most important artifact \u2014 think of a Dockerfile or Terraform file for configuring infrastructure.</li> <li>All-inclusive: Share as much code as you can. Even boilerplate code like Dockerfiles or Terraform or Helm files are useful. Just don\u2019t share company secrets or IP.</li> <li>Specific: Don't worry about generalizing your code, aside from removing anything internal/secret! Other users will extrapolate their own unique solutions from your example.</li> </ul>","tags":["recipes","best practices","examples"]},{"location":"recipes/recipes/#what-are-some-tips-for-a-good-recipe-readme","title":"What are some tips for a good recipe README?","text":"<p>A thoughtful README can take a recipe from good to great. Here are some best practices that we\u2019ve found make for a great recipe README:</p> <ul> <li>Provide a brief explanation of what your recipe demonstrates. This helps users determine quickly whether the recipe is relevant to their needs or answers their questions.</li> <li>List which files are included and what each is meant to do. Each explanation can contain only a few words.</li> <li>Describe any dependencies and prerequisites (in addition to any dependencies you include in a requirements file). This includes both libraries or modules and any services your recipes depends on.</li> <li>If steps are involved or there\u2019s an order to do things, a simple list of steps is helpful.</li> <li>Bonus: troubleshooting steps you encountered to get here or tips where other users might get tripped up.</li> </ul>","tags":["recipes","best practices","examples"]},{"location":"recipes/recipes/#next-steps","title":"Next steps","text":"<p>We hope you\u2019ll feel comfortable sharing your Prefect solutions as recipes in the prefect-recipes repo. Collaboration and knowledge sharing are defining attributes of our Prefect Community! </p> <p>Have questions about sharing or using recipes? Reach out on our active Prefect Slack Community!</p> <p>Happy engineering!</p>","tags":["recipes","best practices","examples"]}]}